===== Repository State: Sun 29 Jun 15:29:24 EAT 2025 =====
Directory: /home/davis/Desktop/3dwebsite

===== ./index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Fashion Studio</title>
  <link href="https://fonts.googleapis.com/css2?family=Avenir:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>

===== ./node_modules =====

===== ./src/App.jsx =====
import { Suspense, useState } from 'react'
import { Canvas } from '@react-three/fiber'
import ModelViewer from './components/ModelViewer'
import './styles/main.scss'

export default function App() {
  const [color, setColor] = useState('#ff6b6b')
  const [outfit, setOutfit] = useState(1)
  const [rotation, setRotation] = useState(false)

  return (
    <div id="app">
      <h1>3D Fashion Studio</h1>
      <div className="info">
        <p>Interact with the 3D model using mouse controls!</p>
        <div className="controls">
          <div className="control-group">
            <label>Color:</label>
            <input type="color" value={color} onChange={(e) => setColor(e.target.value)} />
          </div>
          <div className="control-group">
            <label>Outfit:</label>
            <button onClick={() => setOutfit(1)}>Fabric 1</button>
            <button onClick={() => setOutfit(2)}>Fabric 2</button>
            <button onClick={() => setOutfit(3)}>Leather</button>
          </div>
          <div className="control-group">
            <label>Auto-Rotate:</label>
            <input type="checkbox" checked={rotation} onChange={(e) => setRotation(e.target.checked)} />
          </div>
        </div>
      </div>
      <Canvas shadows camera={{ position: [0, 0, 5], fov: 50 }>
        <Suspense fallback={null}>
          <ModelViewer color={color} outfit={outfit} rotation={rotation} />
        </Suspense>
      </Canvas>
    </div>
  )
}

===== ./src/components/ModelViewer.jsx =====
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import { OrbitControls, useTexture } from '@react-three/drei'

export default function ModelViewer({ color, outfit, rotation }) {
  try {
    const { scene } = useGLTF('/assets/models/mannequin.glb')
    const textures = {
      1: useTexture('/assets/textures/fabric1.jpg'),
      2: useTexture('/assets/textures/fabric2.jpg'),
      3: useTexture('/assets/textures/leather.jpg')
    }

    // Apply texture to all mesh children
    scene.traverse((child) => {
      if (child.isMesh) {
        child.material = new THREE.MeshStandardMaterial({
          color,
          map: textures[outfit],
          roughness: 0.4,
          metalness: 0.1
        })
        child.castShadow = true
        child.receiveShadow = true
      }
    })

    return (
      <>
        <group rotation={[0, rotation ? Date.now() * 0.0005 % (2 * Math.PI) : 0, 0]}>
          <primitive object={scene} scale={[0.01, 0.01, 0.01]} />
        </group>
        <OrbitControls enableZoom={true} enablePan={true} />
        <ambientLight intensity={0.5} />
        <pointLight position={[10, 10, 10]} intensity={1} />
      </>
    )
  } catch (e) {
    console.error('Error loading model:', e)
    return (
      <mesh>
        <boxGeometry args={[1, 1, 1]} />
        <meshStandardMaterial color="hotpink" />
      </mesh>
    )
  }
}

===== ./src/main.jsx =====
import { createRoot } from 'react-dom/client'
import App from './App'
import './styles/main.scss'

const root = createRoot(document.getElementById('root'))
root.render(<App />)

===== ./src/styles/main.scss =====
body {
  margin: 0;
  font-family: 'Avenir', sans-serif;
  overflow: hidden;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
}

#app {
  position: relative;
  width: 100vw;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
}

h1 {
  color: #333;
  margin: 20px 0;
  text-align: center;
}

.info {
  background: rgba(255, 255, 255, 0.9);
  padding: 15px;
  border-radius: 10px;
  margin-bottom: 20px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.controls {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.control-group {
  display: flex;
  align-items: center;
  gap: 10px;
}

.control-group label {
  font-size: 14px;
  color: #333;
}

.control-group button {
  padding: 8px 16px;
  border: none;
  border-radius: 5px;
  background: #6200ea;
  color: white;
  cursor: pointer;
  font-size: 14px;
}

.control-group button:hover {
  background: #7f39fb;
}

.control-group input[type="color"] {
  width: 40px;
  height: 40px;
  border: none;
  cursor: pointer;
}

.control-group input[type="checkbox"] {
  width: 20px;
  height: 20px;
  cursor: pointer;
}

canvas {
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
}

===== ./vite.config.js =====
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  },
  resolve: {
    alias: {
      '@': '/src'
    }
  },
  esbuild: {
    loader: 'jsx',
    include: /src\/.*\.[jt]sx?$/
  },
  optimizeDeps: {
    include: ['react', 'react-dom', '@react-three/fiber', '@react-three/drei', 'three', 'three-stdlib', 'three-mesh-bvh']
  },
  css: {
    preprocessorOptions: {
      scss: {
        api: 'modern'
      }
    }
  }
})

===== package-lock.json (summary) =====
Showing package-lock.json summary (full file omitted due to size)
⚠️ jq not installed, skipping package-lock.json summary

===== Git Status =====
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   continue-3dwebsite.log
	modified:   printstate.log
	modified:   state.txt

no changes added to commit (use "git add" and/or "git commit -a")

